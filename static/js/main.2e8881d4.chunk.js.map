{"version":3,"sources":["apiCalls.tsx","components/Form/Form.tsx","components/Card/Card.tsx","components/Header/Header.tsx","components/Feed/Feed.tsx","components/Article/Article.tsx","components/TopicForm/TopicForm.tsx","components/TopicCard/TopicCard.tsx","components/TopicFeed/TopicFeed.tsx","components/NoMatch/NoMatch.tsx","components/History/History.tsx","components/App/App.tsx","index.tsx"],"names":["getArticles","topic","fetch","then","response","checkResponse","data","cleanArticles","results","slice","ok","Error","status","json","articles","map","section","title","abstract","short_url","multimedia","url","sentiment","id","replace","Form","updateUserSentiment","history","useHistory","submitUserSentiment","userSentiment","push","className","onClick","name","event","preventDefault","document","getElementById","classList","toggle","Card","image","storeArticle","to","src","alt","Header","Feed","unreadArticles","articleCards","article","length","placeholderText","Article","caption","selectedTopic","TopicForm","assignTopic","sectionTopics","TopicCard","console","log","TopicFeed","NoMatch","location","useLocation","pathname","History","App","useState","setArticles","setUnreadArticles","setHistory","error","setError","setUserSentiment","setSelectedTopic","useEffect","cleanedArticles","getSentimentScores","scoredArticles","i","Math","round","catch","message","sortedArticles","getSortedArticles","getUnreadArticles","sort","articleA","articleB","random","filter","find","historyArticle","Promise","all","text","token","score","err","getSentiment","newUserSentiment","matchingArticle","localHistory","JSON","parse","localStorage","getItem","setItem","stringify","includes","exact","path","render","match","params","singleArticle","component","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.2e8881d4.chunk.js","sourcesContent":["import { CleanedArticle, Multimedia } from './Models'\n\ninterface OriginalArticle {\n  section: string\n  title: string\n  abstract: string\n  short_url: string\n  multimedia: Multimedia[]\n  url: string\n}\n\ninterface Response {\n  ok: boolean\n  status: number\n  json: any\n}\n\nexport const getArticles = (topic = 'home'): Promise<CleanedArticle[]> => {\n  return (\n    fetch(`https://api.nytimes.com/svc/topstories/v2/${topic}.json?api-key=GKUzDD1VY9ssjZ1AGusX3ci6AeoXCaSr`)\n    .then(response => checkResponse(response))\n    .then(data => cleanArticles(data.results.slice(0,3)))\n  );\n};\n\nconst checkResponse = (response: Response) => {\n  if (!response.ok) {\n    throw new Error(`${ response.status } Error`);\n  }\n  return response.json();\n};\n\nexport const getSentiment = (title: string, abstract: string): Promise<number> => {\n  const text = title + ' ' + abstract;\n  // add your API token here; remove before merging to main\n  const token = '' || 'beb0091844524790b7672a69bac06a2a';\n  if (token) { console.log('token in use; remove before pushing')}\n  return fetch(`https://api.dandelion.eu/datatxt/sent/v1/?lang=en&text=${text}&token=${token}`)\n    .then(response => checkResponse(response))\n    .then(data => data.sentiment.score)\n    .catch(err => console.log('error: ', err))\n};\n\nconst cleanArticles = (articles: OriginalArticle[]): CleanedArticle[] => {\n  return articles.map(({ section, title, abstract, short_url, multimedia, url }: OriginalArticle) => {\n    return ({\n      topic: section,\n      title,\n      abstract,\n      short_url,\n      sentiment: 0,\n      multimedia: multimedia[0],\n      id: url.slice(24, -5).replace(/\\//g, '-')\n    });\n  });\n};\n","import { useHistory } from 'react-router-dom';\nimport './Form.css';\n\ninterface FormProps {\n  updateUserSentiment: (userSentiment: number) => void;\n}\n\nconst Form = ({ updateUserSentiment }: FormProps): JSX.Element => {\n  const history = useHistory();\n\n  const submitUserSentiment = (userSentiment: number) => {\n      updateUserSentiment(userSentiment);\n      history.push(\"/feed\");\n  }\n\n  const showSynopsis = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    const formSynopsis = document.getElementById('synopsisInfo') as HTMLElement;\n    formSynopsis.classList.toggle('hidden');\n  }\n\n  return (\n    <section className=\"questionnaire\">\n      <header className=\"questionnaire-header\">\n        <div className=\"blue-stripe\">\n          <h1 className=\"header-text cy-header-text\">\n            Well<span className=\"header-text-2\">News</span>\n          </h1>\n        </div>\n      </header>\n      <h2 className='cy-sentiment-question'>What kind of mood are you in?</h2>\n      <div className=\"sentiments-container\">\n        <button\n          className=\"sentiment-btn cy-strongly-negative-btn\"\n          aria-label=\"strongly negative\"\n          title=\"strongly negative\"\n          onClick={() => submitUserSentiment(0)}\n        >\n          ☹️\n        </button>\n        <button\n          className=\"sentiment-btn cy-negative-btn\"\n          aria-label=\"negative\"\n          title=\"negative\"\n          onClick={() => submitUserSentiment(2)}\n        >\n          🙁\n        </button>\n        <button\n          className=\"sentiment-btn cy-neutral-btn\"\n          aria-label=\"neutral\"\n          title=\"neutral\"\n          onClick={() => submitUserSentiment(5)}\n        >\n          😶\n        </button>\n         <button\n          className=\"sentiment-btn cy-positive-btn\"\n          aria-label=\"positive\"\n          title=\"positive\"\n          onClick={() => submitUserSentiment(8)}\n        >\n          🙂\n        </button>\n        <button\n          className=\"sentiment-btn cy-strongly-positive-btn\"\n          aria-label=\"strongly positive\"\n          title=\"strongly positive\"\n          onClick={() => submitUserSentiment(10)}\n        >\n          😁\n        </button>\n      </div>\n      <button className='skip-btn' onClick={ () => submitUserSentiment(5) }>\n          Skip\n      </button>\n      <button className=\"view-synopsis-button cy-view-synopsis-button\" name=\"viewSynopsisButton\" onClick={ showSynopsis }>Why we ask? ▽</button>\n      <article className=\"hidden wellnews-synopsis cy-wellnews-synopsis\" id=\"synopsisInfo\">\n        <p>Based on your mood and the articles you read, we dynamically sort your feed and nudge you toward sentimental balance. We don't filter your feed.</p>\n        <p>If you prefer, skip the questionnare and we'll sort your feed based only on the articles you read.</p>\n      </article>\n    </section>\n  );\n};\n\nexport default Form;\n","import { Link } from 'react-router-dom'\nimport './Card.css';\n\ninterface CardProps {\n  title: string\n  image: string\n  id: string\n  sentiment: number\n  topic: string\n  updateUserSentiment: (userSentiment: number) => void\n  storeArticle: (id: string) => void\n}\n\nconst Card = ({ title, image, id, sentiment, topic, updateUserSentiment, storeArticle }: CardProps): JSX.Element => {\n\n  const handleClick = (): void => {\n    storeArticle(id)\n    updateUserSentiment(sentiment)\n  }\n\n  return (\n    <div className=\"article-boundary\">\n      <div className=\"card-container\">\n        <article className=\"news-card cy-article-card\">\n          <Link\n            to={`/feed/${id}`}\n            onClick={ handleClick }\n            className=\"cy-article-link\"\n          >\n          <div className=\"article-image-container\">\n            {sentiment >= 7 && <h3 className=\"article-sentiment green\">{sentiment}</h3>}\n            {sentiment <= 3 && <h3 className=\"article-sentiment red\">{sentiment}</h3>}\n            {(sentiment >= 4 && sentiment <= 6) && <h3 className=\"article-sentiment blue\">{sentiment}</h3>}\n            <img className=\"article-image cy-article-image\" src={image} alt={title} />\n          </div>\n          <div className=\"topic-container\">\n            <p className=\"topic-text\">\n              {topic}\n            </p>\n          </div>\n          <h2 className=\"article-title cy-article-title\">{title}</h2>\n          </Link>\n          <div className=\"divider\"></div>\n        </article>\n      </div>\n    </div>\n  )\n}\n\nexport default Card;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Header.css';\n\nconst Header = (): JSX.Element => {\n  return (\n    <header className=\"header\">\n      <div className=\"header-elements-container\">\n        <Link to='/'>\n          <button className=\"check-in-btn\">\n            <span className=\"check-in-text\">Check In</span>\n          </button>\n        </Link>\n        <h1 className=\"header-txt cy-header-txt\">\n          Well<span className=\"header-text-2\">News</span>\n        </h1>\n        <Link to='/history'>\n          <button className=\"history-btn\">History</button>\n        </Link>\n        <Link to='/search-topic'>\n          <button className=\"list-btn\" aria-label=\"Browse by Topic\"></button>\n        </Link>\n      </div>\n    </header>\n  )\n}\n\n\nexport default Header;\n","import { Link } from 'react-router-dom';\nimport { CleanedArticle } from '../../Models';\nimport Card from '../Card/Card';\nimport Header from '../Header/Header';\nimport './Feed.css';\n\ninterface FeedProps {\n  unreadArticles: CleanedArticle[] | undefined;\n  updateUserSentiment: (userSentiment: number) => void;\n  storeArticle: (id: string) => void;\n}\n\nconst Feed = ({ unreadArticles, updateUserSentiment, storeArticle }: FeedProps): JSX.Element => {\n\n  let articleCards: JSX.Element[] = [];\n\n  if (unreadArticles) {\n    articleCards = unreadArticles.map(article => {\n      return  (\n        <Card\n          title={ article.title }\n          image={ article.multimedia.url }\n          id={ article.id }\n          sentiment={ article.sentiment }\n          topic={ article.topic}\n          updateUserSentiment={ updateUserSentiment }\n          storeArticle={ storeArticle }\n          key={ article.title }\n        />\n      )\n    })\n  }\n\n  return (\n    <>\n      <Header />\n      <div className=\"articles-container\">\n        <section className=\"articles-display\">\n          { articleCards.length ? articleCards :\n            <Link to=\"/search-topic\">\n              <button className='find-more-btn'>Find more articles by topic</button>\n            </Link> }\n        </section>\n      </div>\n    </>\n  );\n};\n\nexport default Feed;\n","import '../Header/Header.css';\nimport './Article.css';\nimport Header from '../Header/Header'\n\nconst placeholderText = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Aliquam ut porttitor leo a diam sollicitudin tempor id eu. In arcu cursus euismod quis viverra nibh cras pulvinar mattis. A diam maecenas sed enim. Ipsum dolor sit amet consectetur. Mauris commodo quis imperdiet massa tincidunt nunc pulvinar sapien. Tellus integer feugiat scelerisque varius morbi. Ac placerat vestibulum lectus mauris ultrices eros in cursus turpis. Gravida neque convallis a cras semper auctor. Suspendisse in est ante in nibh mauris cursus mattis molestie.\"\n\ninterface ArticleProps {\n  title: string\n  image: string\n  abstract: string\n  caption: string\n  selectedTopic: string\n}\n\nconst Article = ({ title, image, abstract, caption, selectedTopic }: ArticleProps): JSX.Element => {\n\n  return (\n    <>\n      <Header />\n      <section className=\"single-article-container\">\n        <figure>\n          <img src={image} alt={caption} className=\"single-article-image cy-single-article-image\"/>\n          <figcaption className=\"single-article-caption cy-single-article-caption\">{caption}</figcaption>\n        </figure>\n        <h2 className=\"single-article-title cy-single-article-title\">{title}</h2>\n        <p className=\"cy-single-article-abstract\">{abstract}</p>\n        <p>{placeholderText}</p>\n        <p>{placeholderText}</p>\n        <p>{placeholderText}</p>\n        <p>{placeholderText}</p>\n        <p>{placeholderText}</p>\n      </section>\n    </>\n  )\n}\n\nexport default Article\n","import { Link } from 'react-router-dom';\nimport Header from '../Header/Header';\nimport './TopicForm.css'\ninterface TopicFormProps {\n  assignTopic: (selectedTopic: string) => void\n}\n\nconst TopicForm = ({ assignTopic }: TopicFormProps): JSX.Element => {\n\nconst availableTopics = ['arts', 'automobiles', 'books', 'business', 'fashion', 'food', 'health', 'home', 'insider', 'magazine', 'movies', 'nyregion', 'obituaries', 'opinion', 'politics', 'realestate', 'science', 'sports', 'sundayreview', 'technology', 'theater', 't-magazine', 'travel', 'upshot', 'us', 'world'];\n\nconst sectionTopics = availableTopics.map(topic => {\n    return (\n      <Link\n        className=\"topic\"\n        to={`/feed/${topic}`}\n        key={ topic }\n        onClick={() => assignTopic(topic)}>\n        {topic}\n      </Link>\n    )\n})\n\n  return (\n    <>\n      <Header />\n      <h3 className=\"browse-topics\">Browse articles by topic:</h3>\n      <form className=\"cy-topic-selection\">\n        { sectionTopics }\n      </form>\n    </>\n  )\n}\n\nexport default TopicForm;\n","import { Link } from 'react-router-dom';\nimport '../Card/Card.css';\n\ninterface TopicCard {\n  title: string\n  image: string\n  id: string\n  sentiment: number\n  topic: string\n  updateUserSentiment: (userSentiment: number) => void\n  selectedTopic: string\n  storeArticle: (id: string) => void\n}\n\nconst TopicCard = ({ title, image, id, sentiment, topic, updateUserSentiment, selectedTopic, storeArticle }: TopicCard): JSX.Element => {\n  console.log(sentiment);\n  const handleClick = () => {\n    updateUserSentiment!(sentiment)\n    storeArticle(id)\n  }\n\n  return (\n\n      <div className=\"card-container\">\n        <article className=\"news-card cy-article-card\">\n          <Link\n            to={`/feed/${selectedTopic}/${id}`}\n            onClick={ handleClick }\n            className=\"cy-article-link\"\n          >\n          <div className=\"article-image-container\">\n            {sentiment >= 7 && <h3 className=\"article-sentiment green\">{sentiment}</h3>}\n            {sentiment <= 3 && <h3 className=\"article-sentiment red\">{sentiment}</h3>}\n            {(sentiment >= 4 && sentiment <= 6) && <h3 className=\"article-sentiment blue\">{sentiment}</h3>}\n            <img className=\"article-image cy-article-image\" src={image} alt={title} />\n          </div>\n          <div className=\"topic-container\">\n            <p className=\"topic-text\">\n              {topic}\n            </p>\n          </div>\n          <h2 className=\"article-title cy-article-title\">{title}</h2>\n          </Link>\n          <div className=\"divider\"></div>\n        </article>\n      </div>\n\n  )\n}\n\nexport default TopicCard;\n","import { Link } from 'react-router-dom';\nimport { CleanedArticle } from '../../Models';\nimport TopicCard from '../TopicCard/TopicCard';\nimport Header from '../Header/Header';\n\ninterface TopicFeed {\n  unreadArticles: CleanedArticle[] | undefined;\n  selectedTopic: string\n  updateUserSentiment: (userSentiment: number) => void;\n  storeArticle?: (id: string) => void\n}\n\nconst TopicFeed = ({ unreadArticles, updateUserSentiment, selectedTopic, storeArticle }: TopicFeed): JSX.Element => {\n\n  let articleCards: JSX.Element[] = [];\n\n  if (unreadArticles) {\n    articleCards = unreadArticles.map(article => {\n      return (\n        <TopicCard\n          title={ article.title }\n          image={ article.multimedia.url }\n          id={ article.id }\n          sentiment={ article.sentiment }\n          updateUserSentiment={ updateUserSentiment }\n          storeArticle={ storeArticle! }\n          selectedTopic = { selectedTopic }\n          topic={ article.topic}\n          key={ article.title }\n        />\n      )\n    })\n  }\n\n    return (\n      <>\n        <Header />\n        <div className=\"articles-container\">\n          <section className=\"articles-display\">\n            { articleCards.length > 0 ? articleCards :\n              <Link to=\"/search-topic\">\n                <button className='find-more-btn'>Find more articles by topic</button>\n              </Link> }\n          </section>\n        </div>\n      </>\n    );\n};\n\nexport default TopicFeed;\n","import { Link, useLocation } from 'react-router-dom'\nimport './NoMatch.css'\n\nconst NoMatch = (): JSX.Element => {\n  const location = useLocation();\n  return (\n    <div>\n      <h3 className=\"cy-error-message\">\n        No match for <code>{location.pathname}</code>\n      </h3>\n      <Link to=\"/feed\" className=\"cy-feed-link\">\n        Back to Feed\n      </Link>\n    </div>\n  );\n}\n\nexport default NoMatch\n","import { Link } from 'react-router-dom';\nimport Card from '../Card/Card';\nimport { CleanedArticle } from '../../Models';\nimport '../Feed/Feed.css'\n\ninterface HistoryProps {\n  history: CleanedArticle[];\n  updateUserSentiment: (userSentiment: number) => void\n  storeArticle: (id: string) => void\n}\n\nconst History = ({ history, storeArticle, updateUserSentiment }: HistoryProps): JSX.Element => {\n\n  let articleCards: JSX.Element[] = [];\n\n  if (history) {\n    articleCards = history.map((article: CleanedArticle) => {\n      return (\n        <Card\n          title={ article.title }\n          image={ article.multimedia.url }\n          key={ article.title }\n          sentiment={ article.sentiment }\n          id={ article.id }\n          topic= { article.topic }\n          storeArticle={ storeArticle }\n          updateUserSentiment={ updateUserSentiment }\n        />\n      )\n    })\n  }\n\n  return (\n    <div className=\"articles-container\">\n        <section className=\"articles-display\">\n          { articleCards.length ? articleCards : <h3>No history</h3> }\n        </section>\n    </div>\n  )\n}\n\nexport default History;\n","import React, { useState, useEffect } from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport { getArticles, getSentiment } from '../../apiCalls';\nimport { CleanedArticle } from '../../Models';\nimport Form from '../Form/Form';\nimport Feed from '../Feed/Feed';\nimport Article from '../Article/Article';\nimport Header from '../Header/Header';\nimport TopicForm from '../TopicForm/TopicForm';\nimport TopicFeed from '../TopicFeed/TopicFeed'\nimport NoMatch from '../NoMatch/NoMatch';\nimport './App.css';\nimport History from '../History/History'\n\nconst App = (): JSX.Element => {\n  const [articles, setArticles] = useState<CleanedArticle[]>([]);\n  const [unreadArticles, setUnreadArticles] = useState<CleanedArticle[] | undefined>([])\n  const [history, setHistory] = useState<CleanedArticle[]>([]);\n  const [error, setError] = useState('');\n  const [userSentiment, setUserSentiment] = useState<number | null>(null);\n  const [selectedArticles, setSelectedArticles] = useState<CleanedArticle[]>([]);\n  const [selectedTopic, setSelectedTopic] = useState<string>('');\n\n  useEffect((): void => {\n    getArticles()\n      .then((cleanedArticles: CleanedArticle[]): void => {\n        getSentimentScores(cleanedArticles)\n          .then((response: number[]) => {\n            const scoredArticles = cleanedArticles.map((article, i) => {\n               article.sentiment = Math.round((response[i] + 1) * 5);\n               return article;\n            });\n            setArticles(scoredArticles);\n          });\n      })\n      .catch(error => setError(error.message));\n  }, []);\n\n  useEffect((): void => {\n    const sortedArticles = getSortedArticles();\n    setArticles(sortedArticles);\n  }, [userSentiment])\n\n  useEffect((): void => {\n    const unreadArticles = getUnreadArticles();\n    setUnreadArticles(unreadArticles);\n  }, [articles, history])\n\n  const getSortedArticles = (): CleanedArticle[] => {\n    let sortedArticles;\n    if (userSentiment! >= 0 && userSentiment! <= 3) {\n      sortedArticles = articles.slice().sort((articleA, articleB) => {\n        return articleB.sentiment - articleA.sentiment;\n      })\n    } else if (userSentiment! <= 10 && userSentiment! >= 7) {\n      sortedArticles = articles.slice().sort((articleA, articleB) => {\n        return articleA.sentiment - articleB.sentiment;\n      })\n    } else {\n      sortedArticles = articles.slice().sort((articleA, articleB) => 0.5 - Math.random());\n    }\n    return sortedArticles;\n  }\n\n  const getUnreadArticles = (): CleanedArticle[] | undefined => {\n    if (history.length) {\n      return articles.filter(article => {\n        return !history.find(historyArticle => historyArticle.id === article.id)\n      })\n    }\n    return articles;\n  }\n\n  const getSentimentScores = (cleanedArticles: CleanedArticle[]): Promise<number[]> => {\n    return Promise.all(\n      cleanedArticles.map((article: CleanedArticle) => {\n        return getSentiment(article.title, article.abstract)\n      })\n    );\n  };\n\n  const updateUserSentiment = (newUserSentiment: number) => {\n    if (userSentiment === null) {\n      return setUserSentiment(newUserSentiment)\n    }\n    setUserSentiment((userSentiment + newUserSentiment) / 2);\n  }\n\n  const assignTopic = (selectedTopic: string): void => {\n    setSelectedTopic(selectedTopic);\n    getArticles(selectedTopic)\n      .then((cleanedArticles: CleanedArticle[]): void => {\n        getSentimentScores(cleanedArticles)\n          .then((response: number[]) => {\n\n            const scoredArticles = cleanedArticles.map((article, i) => {\n               article.sentiment = Math.round((response[i] + 1) * 5);\n               return article;\n            });\n            setArticles(scoredArticles);\n          });\n      })\n      .catch(error => setError(error.message));\n  }\n\n  const storeArticle = (id: string): void => {\n    const matchingArticle = articles.find(article => article.id === id);\n    const localHistory = JSON.parse(localStorage.getItem('wellnewsHistory')!);\n    if (!localHistory) {\n      localStorage.setItem('wellnewsHistory', JSON.stringify([id]));\n      return setHistory([matchingArticle!]);\n    } else if (!localHistory.includes(id)) {\n      localHistory.push(id)\n      localStorage.setItem('wellnewsHistory', JSON.stringify(localHistory))\n      setHistory([...history, matchingArticle!]);\n    }\n  }\n\n  return (\n    <div className=\"app-container\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Form updateUserSentiment={ updateUserSentiment } />\n          </Route>\n          <Route\n            exact path=\"/feed\"\n            render={() => {\n              return (\n                <>\n                  <Feed\n                    unreadArticles={ unreadArticles }\n                    updateUserSentiment={ updateUserSentiment }\n                    storeArticle={ storeArticle }\n                  />\n                  { articles.length === 0 &&\n                    <h2 className=\"loading-text\">Loading... </h2>\n                  }\n                  { error && <h2>{error}</h2> }\n                </>\n              )\n            }}\n          />\n          <Route\n            exact path={`/feed/${selectedTopic}`}\n            render={() => {\n              return (\n                <>\n                  <TopicFeed\n                    unreadArticles={ unreadArticles }\n                    updateUserSentiment={ updateUserSentiment }\n                    selectedTopic = { selectedTopic }\n                    storeArticle={ storeArticle }\n                  />\n                  { !articles.length && <h2>Loading.. </h2>}\n                  { error && <h2>{error}</h2> }\n                </>\n              )\n            }}\n          />\n          <Route exact path=\"/search-topic\">\n            <TopicForm assignTopic={ assignTopic } />\n          </Route>\n          <Route\n            exact path=\"/feed/:id\"\n            render={({ match }) => {\n              const id = match.params.id;\n              const singleArticle = articles.find(article => article.id === id)\n\n              if (singleArticle) {\n                return (\n                  <Article\n                    title={ singleArticle.title }\n                    image={ singleArticle.multimedia.url }\n                    caption={ singleArticle.multimedia.caption }\n                    abstract={ singleArticle.abstract }\n                    selectedTopic={ selectedTopic }\n                    key={ singleArticle.title }\n                  />\n                )\n              } else {\n                return <NoMatch />\n              }\n            }}\n          />\n          <Route\n            exact path={`/feed/${selectedTopic}/:id`}\n            render={({ match }) => {\n              const id = match.params.id\n              const singleArticle = articles.find(article => article.id === id)\n\n              if (singleArticle) {\n                return (\n                  <Article\n                    title={ singleArticle.title }\n                    image={ singleArticle.multimedia.url }\n                    caption={ singleArticle.multimedia.caption }\n                    abstract={ singleArticle.abstract }\n                    selectedTopic= { selectedTopic }\n                    key={ singleArticle.title }\n                  />\n                )\n              } else {\n                return <NoMatch />\n              }\n            }}\n          />\n          <Route\n            exact path=\"/history\"\n            render={() => {\n              return (\n                <>\n                  <Header />\n                  <History\n                    history={ history }\n                    storeArticle={ storeArticle }\n                    updateUserSentiment={ updateUserSentiment }\n                  />\n                  { error && <h2>{error}</h2> }\n                </>\n              )\n            }}\n          />\n          <Route path=\"*\" component={NoMatch} />\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}