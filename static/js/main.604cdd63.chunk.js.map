{"version":3,"sources":["apiCalls.tsx","components/Card/Card.tsx","components/Header/Header.tsx","components/Feed/Feed.tsx","components/History/History.tsx","components/NoMatch/NoMatch.tsx","components/SentimentForm/SentimentForm.tsx","components/TopicForm/TopicForm.tsx","components/SavedArticles/SavedArticles.tsx","components/App/App.tsx","index.tsx"],"names":["getArticles","topic","fetch","then","response","checkResponse","data","cleanArticles","results","slice","ok","Error","status","json","articles","filter","multimedia","Array","isArray","map","section","title","abstract","short_url","url","shortUrl","sentiment","id","replace","Card","image","updateUserSentiment","storeArticle","toggleSaved","isSaved","className","toUpperCase","onClick","type","href","target","src","alt","Header","assignTopic","selectedTopic","useState","menuOpen","setMenuOpen","to","Feed","unreadArticles","savedArticles","loading","articleNumber","setArticleNumber","articleCards","article","find","savedArticle","charAt","length","History","history","NoMatch","location","useLocation","pathname","Form","useHistory","submitUserSentiment","userSentiment","push","name","event","preventDefault","document","getElementById","classList","toggle","TopicForm","sectionTopics","SavedArticles","App","setArticles","setUnreadArticles","setHistory","setUserSentiment","setSelectedTopic","setSavedArticles","error","setError","setLoading","useEffect","cleanedArticles","getSentimentScores","scoredArticles","i","Math","round","catch","message","sortedArticles","getSortedArticles","updateHistory","getUnreadArticles","sort","articleA","articleB","random","historyArticle","Promise","all","score","err","console","log","newUserSentiment","getLocalHistory","JSON","parse","localStorage","getItem","localHistory","newHistory","includes","matchingArticle","setItem","stringify","newSavedArticles","newSavedArticle","path","exact","render","component","ReactDOM","StrictMode"],"mappings":"iUAiBaA,EAAc,SAACC,GAC1B,OACEC,MAAM,6CAAD,OAA8CD,EAA9C,mDACJE,MAAK,SAAAC,GAAQ,OAAIC,EAAcD,MAC/BD,MAAK,SAAAG,GACJ,OAAOC,EAAcD,EAAKE,QAAQC,MAAM,EAAG,SAI3CJ,EAAgB,SAACD,GACrB,IAAKA,EAASM,GACZ,MAAM,IAAIC,MAAJ,UAAcP,EAASQ,OAAvB,WAER,OAAOR,EAASS,QAWZN,EAAgB,SAACO,GAerB,OAdwBA,EAASC,QAAO,YAAoC,IAAlCC,EAAiC,EAAjCA,WACxC,OAAOC,MAAMC,QAAQF,MAEtBG,KAAI,YAAgF,IAA7EC,EAA4E,EAA5EA,QAASC,EAAmE,EAAnEA,MAAOC,EAA4D,EAA5DA,SAAUC,EAAkD,EAAlDA,UAAWP,EAAuC,EAAvCA,WAAYQ,EAA2B,EAA3BA,IACrD,MAAQ,CACNvB,MAAOmB,EACPC,QACAC,WACAG,SAAUF,EACVG,UAAW,EACXV,WAAYA,EAAW,GACvBW,GAAIH,EAAIf,MAAM,IAAK,GAAGmB,QAAQ,MAAO,U,eCY9BC,EAjDF,SAAC,GAA4I,IAA1IR,EAAyI,EAAzIA,MAAOS,EAAkI,EAAlIA,MAAOH,EAA2H,EAA3HA,GAAIF,EAAuH,EAAvHA,SAAUC,EAA6G,EAA7GA,UAAWzB,EAAkG,EAAlGA,MAAO8B,EAA2F,EAA3FA,oBAAqBC,EAAsE,EAAtEA,aAAcV,EAAwD,EAAxDA,SAAUW,EAA8C,EAA9CA,YAAaC,EAAiC,EAAjCA,QAOtH,OACE,0BAASC,UAAU,4BAAnB,UACE,sBAAKA,UAAU,cAAf,UACE,mBAAGA,UAAU,aAAb,SAA2BlC,EAAMmC,gBAC/BF,EACA,wBACEC,UAAU,cACVE,QAAU,kBAAMJ,EAAYN,IAC5BW,KAAK,SACL,aAAW,qCAJb,SAME,sBAAMH,UAAU,iBAAhB,wBAKF,wBACEA,UAAU,cACVE,QAAU,kBAAMJ,EAAYN,IAC5BW,KAAK,SACL,aAAW,eAJb,SAME,sBAAMH,UAAU,iBAAhB,kCAMN,oBACEE,QAlCc,WAClBN,EAAoBL,GACpBM,EAAaL,IAiCTQ,UAAU,kBACVI,KAAOd,EACPe,OAAO,SAJT,UAME,oBAAIL,UAAU,iCAAd,SAAgDd,IAChD,qBAAKc,UAAU,iCAAiCM,IAAKX,EAAOY,IAAKrB,OAEnE,oBAAGc,UAAU,gBAAb,cAA+Bb,EAA/B,WCtBSqB,G,MA7BA,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,YAAaC,EAAyC,EAAzCA,cAC7B,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEA,OACE,yBAAQb,UAAU,SAAlB,UACE,cAAC,IAAD,CAAMc,GAAG,YAAT,SACE,wBAAQd,UAAU,eAAe,aAAW,kCAG9C,cAAC,IAAD,CACEc,GAAG,sBACHZ,QAAS,kBAAMO,EAAY,SAF7B,SAGE,qBAAIT,UAAU,2BAAd,iBACM,sBAAMA,UAAU,gBAAhB,uBAGNY,EACA,cAAC,IAAD,CAAME,GAAE,yBAAqBJ,GAAkBR,QAAU,kBAAMW,GAAY,IAA3E,SACE,wBAAQb,UAAU,WAAW,aAAW,sBAExC,cAAC,IAAD,CAAMc,GAAG,mBAAmBZ,QAAU,kBAAMW,GAAY,IAAxD,SACA,wBAAQb,UAAU,WAAW,aAAW,2BCkEnCe,G,MA9EF,SAAC,GAAoJ,IAAlJC,EAAiJ,EAAjJA,eAAgBpB,EAAiI,EAAjIA,oBAAqBC,EAA4G,EAA5GA,aAAca,EAA8F,EAA9FA,cAAeZ,EAA+E,EAA/EA,YAAamB,EAAkE,EAAlEA,cAAeR,EAAmD,EAAnDA,YAAaS,EAAsC,EAAtCA,QACzH,EAA0CP,mBAAiB,GAA3D,mBAAOQ,EAAP,KAAsBC,EAAtB,KACIC,EAA8B,GAE9BL,IACFK,EAAeL,EAAehC,KAAI,SAAAsC,GAChC,IAAIvB,EAOJ,OALEA,IADEkB,EAAcM,MAAK,SAAAC,GAAY,OAAIA,EAAahC,KAAO8B,EAAQ9B,MAOjE,cAAC,EAAD,CACEA,GAAK8B,EAAQ9B,GACbF,SAAWgC,EAAQhC,SACnBJ,MAAQoC,EAAQpC,MAChBS,MAAQ2B,EAAQzC,WAAWQ,IAC3BE,UAAY+B,EAAQ/B,UACpBzB,MAAQwD,EAAQxD,MAChBqB,SAAWmC,EAAQnC,SACnBS,oBAAsBA,EACtBC,aAAeA,EACfC,YAAcA,EACdC,QAAUA,GACJuB,EAAQpC,WAMtB,IAAMpB,EAA0B,SAAlB4C,EAA2B,WAAaA,EAAce,OAAO,GAAGxB,cAAgBS,EAAcpC,MAAM,GAElH,OACE,qCACE,cAAC,EAAD,CAAQmC,YAAcA,EAAcC,cAAgBA,IACpD,6BAAK5C,IACL,0BAASkC,UAAU,qBAAnB,UACIkB,EACA,oBAAIlB,UAAU,eAAd,yBACEqB,EAAaF,GAES,IAAxBE,EAAaK,SAAiBR,GAC9B,cAAC,IAAD,CAAMJ,GAAG,mBAAmBd,UAAU,gBAAtC,4CAKJ,qBAAKA,UAAU,WACf,sBAAKA,UAAU,kBAAf,YACMmB,GACF,wBACEnB,UAAU,qBACVE,QAAS,kBAAMkB,EAAiBD,EAAgB,IAChD,aAAW,oBAHb,SAKE,sBAAMnB,UAAU,iBAAhB,8BAKFmB,EAAgBE,EAAaK,OAAS,GACtC,wBACA1B,UAAU,oBACVE,QAAS,kBAAMkB,EAAiBD,EAAgB,IAChD,aAAW,eAHX,SAKE,sBAAMnB,UAAU,iBAAhB,yCC3BG2B,EA5CC,SAAC,GAAuI,IAArIC,EAAoI,EAApIA,QAAS/B,EAA2H,EAA3HA,aAAcD,EAA6G,EAA7GA,oBAAqBE,EAAwF,EAAxFA,YAAamB,EAA2E,EAA3EA,cAAeR,EAA4D,EAA5DA,YAAaC,EAA+C,EAA/CA,cAElGW,EAA8B,GA8BlC,OA5BIO,IACFP,EAAeO,EAAQ5C,KAAI,SAACsC,GAC1B,IAAIvB,EAOJ,OALEA,IADEkB,EAAcM,MAAK,SAAAC,GAAY,OAAIA,EAAahC,KAAO8B,EAAQ9B,MAOjE,cAAC,EAAD,CACEN,MAAQoC,EAAQpC,MAChBS,MAAQ2B,EAAQzC,WAAWQ,IAE3BE,UAAY+B,EAAQ/B,UACpBD,SAAWgC,EAAQhC,SACnBE,GAAK8B,EAAQ9B,GACb1B,MAASwD,EAAQxD,MACjBqB,SAAYmC,EAAQnC,SACpBU,aAAeA,EACfD,oBAAsBA,EACtBE,YAAcA,EACdC,QAAUA,GATJuB,EAAQpC,WAgBpB,qCACE,cAAC,EAAD,CAAQuB,YAAcA,EAAcC,cAAgBA,IACpD,yCACA,yBAASV,UAAU,qBAAnB,SACIqB,EAAaK,OAASL,EACpB,oBAAIrB,UAAU,mBAAd,yDCrCG6B,EAdC,WACd,IAAMC,EAAWC,cACjB,OACE,gCACE,qBAAI/B,UAAU,mBAAd,0BACe,+BAAO8B,EAASE,cAE/B,cAAC,IAAD,CAAMlB,GAAG,sBAAsBd,UAAU,eAAzC,8BC4ESiC,G,MA9EF,SAAC,GAAqD,IAAnDrC,EAAkD,EAAlDA,oBACRgC,EAAUM,cAEVC,EAAsB,SAACC,GACzBxC,EAAoBwC,GACpBR,EAAQS,KAAK,wBASjB,OACE,0BAASrC,UAAU,gBAAnB,UACE,wBAAQA,UAAU,uBAAlB,SACE,qBAAKA,UAAU,cAAf,SACE,qBAAIA,UAAU,6BAAd,iBACM,sBAAMA,UAAU,gBAAhB,yBAIV,oBAAIA,UAAU,wBAAd,2CACA,sBAAKA,UAAU,uBAAf,UACE,wBACEA,UAAU,yCACV,aAAW,oBACXd,MAAM,oBACNgB,QAAS,kBAAMiC,EAAoB,IAJrC,0BAQA,wBACEnC,UAAU,gCACV,aAAW,WACXd,MAAM,WACNgB,QAAS,kBAAMiC,EAAoB,IAJrC,0BAQA,wBACEnC,UAAU,+BACV,aAAW,UACXd,MAAM,UACNgB,QAAS,kBAAMiC,EAAoB,IAJrC,0BAQC,wBACCnC,UAAU,gCACV,aAAW,WACXd,MAAM,WACNgB,QAAS,kBAAMiC,EAAoB,IAJpC,0BAQD,wBACEnC,UAAU,yCACV,aAAW,oBACXd,MAAM,oBACNgB,QAAS,kBAAMiC,EAAoB,KAJrC,6BASF,wBAAQnC,UAAU,WAAWE,QAAU,kBAAMiC,EAAoB,IAAjE,kBAGA,wBAAQnC,UAAU,+CAA+CsC,KAAK,qBAAqBpC,QA7D1E,SAACqC,GACpBA,EAAMC,iBACeC,SAASC,eAAe,gBAChCC,UAAUC,OAAO,WA0D5B,gCACA,0BAAS5C,UAAU,gDAAgDR,GAAG,eAAtE,UACE,iLACA,2IC5BOqD,G,MA1CG,SAAC,GAAiE,IAA/DpC,EAA8D,EAA9DA,YAAaC,EAAiD,EAAjDA,cAI5BoC,EAFkB,CAAC,OAAQ,cAAe,QAAS,WAAY,UAAW,OAAQ,SAAU,OAAQ,UAAW,WAAY,SAAU,WAAY,aAAc,UAAW,WAAY,aAAc,UAAW,SAAU,eAAgB,aAAc,UAAW,aAAc,SAAU,SAAU,KAAM,SAE1Q9D,KAAI,SAAAlB,GACtC,OACE,cAAC,IAAD,CACEkC,UAAU,QACVc,GAAE,yBAAoBhD,GAEtBoC,QAAS,kBAAMO,EAAY3C,IAJ7B,SAKGA,EAAM2D,OAAO,GAAGxB,cAAgBnC,EAAMQ,MAAM,IAFvCR,MAOZ,OACE,qCACE,cAAC,EAAD,CAAQ2C,YAAcA,EAAcC,cAAgBA,IACpD,cAAC,IAAD,CAAMI,GAAG,kBAAT,SACE,yBAAQd,UAAU,YAAYG,KAAK,SAAS,aAAW,iBAAvD,UACE,sBAAMH,UAAU,iBAAhB,sBADF,sBAOF,cAAC,IAAD,CAAMc,GAAG,oBAAT,SACE,yBAAQd,UAAU,cAAcG,KAAK,SAAS,aAAW,UAAzD,UACA,sBAAMH,UAAU,iBAAhB,qBADA,eAOF,sBAAMA,UAAU,qBAAhB,SACI8C,SCaKC,EA5CO,SAAC,GAAoI,IAAlI9B,EAAiI,EAAjIA,cAAepB,EAAkH,EAAlHA,aAAcD,EAAoG,EAApGA,oBAAqBE,EAA+E,EAA/EA,YAAaW,EAAkE,EAAlEA,YAAaC,EAAqD,EAArDA,cAC/FW,EAA8B,GA8BlC,OA5BIJ,IACFI,EAAeJ,EAAcjC,KAAI,SAACsC,GAChC,IAAIvB,GAAU,EAOd,OALEA,IADEkB,EAAcM,MAAK,SAAAC,GAAY,OAAIA,EAAahC,KAAO8B,EAAQ9B,MAOjE,cAAC,EAAD,CACEN,MAAQoC,EAAQpC,MAChBS,MAAQ2B,EAAQzC,WAAWQ,IAE3BE,UAAY+B,EAAQ/B,UACpBD,SAAWgC,EAAQhC,SACnBE,GAAK8B,EAAQ9B,GACb1B,MAASwD,EAAQxD,MACjBqB,SAAYmC,EAAQnC,SACpBU,aAAeA,EACfC,YAAcA,EACdF,oBAAsBA,EACtBG,QAAUA,GATJuB,EAAQpC,WAgBpB,qCACE,cAAC,EAAD,CAAQuB,YAAcA,EAAcC,cAAgBA,IACpD,gDACA,yBAASV,UAAU,qBAAnB,SACIqB,EAAaK,OAASL,EACpB,oBAAIrB,UAAU,mBAAd,mDCiLGgD,G,MAvNH,WACV,MAAgCrC,mBAA2B,IAA3D,mBAAOhC,EAAP,KAAiBsE,EAAjB,KACA,EAA4CtC,mBAE1C,IAFF,mBAAOK,EAAP,KAAuBkC,EAAvB,KAGA,EAA8BvC,mBAA2B,IAAzD,mBAAOiB,EAAP,KAAgBuB,EAAhB,KACA,EAA0CxC,mBAAwB,MAAlE,mBAAOyB,EAAP,KAAsBgB,EAAtB,KACA,EAA0CzC,mBAAiB,QAA3D,mBAAOD,EAAP,KAAsB2C,EAAtB,KACA,EAA0C1C,mBAA2B,IAArE,mBAAOM,EAAP,KAAsBqC,EAAtB,KACA,EAA0B3C,mBAAS,IAAnC,mBAAO4C,EAAP,KAAcC,EAAd,KACA,EAA8B7C,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBuC,EAAhB,KAEAC,qBAAU,WACR7F,EAAY,QACTG,MAAK,SAAC2F,GACLC,EAAmBD,GAChB3F,MAAK,SAACC,GACL,IAAM4F,EAAiBF,EAAgB3E,KAAI,SAACsC,EAASwC,GAElD,OADAxC,EAAQ/B,UAAYwE,KAAKC,MAA0B,GAAnB/F,EAAS6F,GAAK,IACvCxC,KAEV2B,EAAYY,GACZJ,GAAW,GACXD,EAAS,UAGdS,OAAM,SAAAV,GAAK,OAAIC,EAASD,EAAMW,cAChC,IAEHR,qBAAU,WACR,IAAMS,EAAiBC,IACvBnB,EAAYkB,KACX,CAAC/B,IAEJsB,qBAAU,WACRW,IACA,IAAMrD,EAAiBsD,IACvBpB,EAAkBlC,KACjB,CAACrC,IAEJ,IAAMyF,EAAoB,WAaxB,OAXIhC,GAAkB,GAAKA,GAAkB,EAC1BzD,EAASL,QAAQiG,MAAK,SAACC,EAAUC,GAChD,OAAOA,EAASlF,UAAYiF,EAASjF,aAE9B6C,GAAkB,IAAMA,GAAkB,EAClCzD,EAASL,QAAQiG,MAAK,SAACC,EAAUC,GAChD,OAAOD,EAASjF,UAAYkF,EAASlF,aAGtBZ,EAASL,QAAQiG,MAAK,iBAAM,GAAMR,KAAKW,aAKtDJ,EAAoB,WACxB,OAAI1C,EAAQF,OACH/C,EAASC,QAAO,SAAA0C,GACrB,OAAQM,EAAQL,MAAK,SAAAoD,GAAc,OAAIA,EAAenF,KAAO8B,EAAQ9B,SAGlEb,GAGHiF,EAAqB,SAACD,GAC1B,OAAOiB,QAAQC,IACblB,EAAgB3E,KAAI,SAACsC,GACnB,OThDqBpC,ESgDDoC,EAAQpC,MThDQC,ESgDDmC,EAAQnC,ST9C1CpB,MAAM,0DAAD,OADCmB,EAAQ,IAAMC,EACf,4CACTnB,MAAK,SAAAC,GAAQ,OAAIC,EAAcD,MAC/BD,MAAK,SAAAG,GAAI,OAAIA,EAAKoB,UAAUuF,SAC5Bb,OAAM,SAAAc,GAAG,OAAIC,QAAQC,IAAI,UAAWF,MALb,IAAC7F,EAAeC,OSqDpCS,EAAsB,SAACsF,GAC3B,GAAsB,OAAlB9C,EACF,OAAOgB,EAAiB8B,GAE1B9B,GAAkBhB,EAAgB8C,GAAoB,IAGlDzE,EAAc,SAACC,GACnB+C,GAAW,GACXJ,EAAiB3C,GACjB7C,EAAY6C,GACT1C,MAAK,SAAC2F,GACLC,EAAmBD,GAChB3F,MAAK,SAACC,GAEL,IAAM4F,EAAiBF,EAAgB3E,KAAI,SAACsC,EAASwC,GAElD,OADAxC,EAAQ/B,UAAYwE,KAAKC,MAA0B,GAAnB/F,EAAS6F,GAAK,IACvCxC,KAEV2B,EAAYY,GACZJ,GAAW,GACXD,EAAS,UAGdS,OAAM,SAAAV,GAAK,OAAIC,EAASD,EAAMW,aAG7BiB,EAAkB,WACtB,OAAOC,KAAKC,MAAMC,aAAaC,QAAQ,qBAGnClB,EAAgB,WACpB,IAAMmB,EAAeL,IACrB,GAAIK,GAAgBA,EAAa9D,OAAQ,CACvC,IAAM+D,EAAa9G,EAASC,QAAO,SAAC0C,GAClC,OAAOkE,EAAaE,SAASpE,EAAQ9B,OAEvC2D,EAAWsC,KAIT5F,EAAe,SAACL,GACpB,IAAMmG,EAAkBhH,EAAS4C,MAAK,SAAAD,GAAO,OAAIA,EAAQ9B,KAAOA,KAC1DgG,EAAeL,IACrB,IAAKK,EAEH,OADAF,aAAaM,QAAQ,kBAAmBR,KAAKS,UAAU,CAACrG,KACjD2D,EAAW,CAACwC,IACTH,EAAaE,SAASlG,KAChCgG,EAAanD,KAAK7C,GAClB8F,aAAaM,QAAQ,kBAAmBR,KAAKS,UAAUL,IACvDrC,EAAW,GAAD,mBAAKvB,GAAL,CAAc+D,OAItB7F,GAAc,SAACN,GAInB,GAHgByB,EAAcM,MAAK,SAAAC,GACjC,OAAOA,EAAahC,KAAOA,KAOtB,CACL,IAAMsG,EAAmB7E,EAAcrC,QAAO,SAAA4C,GAC5C,OAAOA,EAAahC,KAAOA,KAE7B8D,EAAiBwC,OATL,CACZ,IAAMC,EAAkBpH,EAAS4C,MAAK,SAAAD,GACpC,OAAOA,EAAQ9B,KAAOA,KAExB8D,EAAiB,GAAD,mBAAKrC,GAAL,CAAoB8E,OASlCC,GAAI,yBAAqBtF,GAE/B,OACE,qBAAKV,UAAU,gBAAf,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOiG,OAAK,EAACD,KAAK,aAAlB,SACE,cAAC,EAAD,CAAepG,oBAAsBA,MAEvC,cAAC,IAAD,CACEoG,KAAMA,GACNE,OAAQ,WACN,OACE,qCACE,cAAC,EAAD,CACElF,eAAiBA,EACjBN,cAAgBA,EAChBd,oBAAsBA,EACtBC,aAAeA,EACfC,YAAcA,GACdmB,cAAgBA,EAChBR,YAAcA,EACdS,QAAUA,IAEVqC,GAAS,6BAAKA,UAKxB,cAAC,IAAD,CAAO0C,OAAK,EAACD,KAAK,mBAAlB,SACE,cAAC,EAAD,CACEvF,YAAcA,EACdC,cAAgBA,MAGpB,cAAC,IAAD,CAAOsF,KAAK,kBAAZ,SACE,cAAC,EAAD,CACE/E,cAAgBA,EAChBpB,aAAeA,EACfD,oBAAsBA,EACtBE,YAAcA,GACdW,YAAcA,EACdC,cAAgBA,MAGpB,cAAC,IAAD,CACEuF,OAAK,EAACD,KAAK,oBACXE,OAAQ,WACN,OACE,qCACE,cAAC,EAAD,CACEtE,QAAUA,EACV/B,aAAeA,EACfD,oBAAsBA,EACtBE,YAAcA,GACdmB,cAAgBA,EAChBR,YAAcA,EACdC,cAAgBA,IAEhB6C,GAAS,6BAAKA,UAKxB,cAAC,IAAD,CAAOyC,KAAK,IAAIG,UAAWtE,a,MCxNrCuE,IAASF,OACP,cAAC,IAAMG,WAAP,UACE,cAAC,EAAD,MAEF5D,SAASC,eAAe,W","file":"static/js/main.604cdd63.chunk.js","sourcesContent":["import { CleanedArticle, Multimedia } from './Models'\n\ninterface OriginalArticle {\n  section: string\n  title: string\n  abstract: string\n  short_url: string\n  multimedia: Multimedia[]\n  url: string\n}\n\ninterface Response {\n  ok: boolean\n  status: number\n  json: any\n}\n\nexport const getArticles = (topic: string): Promise<CleanedArticle[]> => {\n  return (\n    fetch(`https://api.nytimes.com/svc/topstories/v2/${topic}.json?api-key=GKUzDD1VY9ssjZ1AGusX3ci6AeoXCaSr`)\n    .then(response => checkResponse(response))\n    .then(data => {\n      return cleanArticles(data.results.slice(0, 10))})\n  )\n};\n\nconst checkResponse = (response: Response) => {\n  if (!response.ok) {\n    throw new Error(`${ response.status } Error`);\n  }\n  return response.json();\n};\n\nexport const getSentiment = (title: string, abstract: string): Promise<number> => {\n  const text = title + ' ' + abstract;\n  return fetch(`https://api.dandelion.eu/datatxt/sent/v1/?lang=en&text=${text}&token=beb0091844524790b7672a69bac06a2a`)\n    .then(response => checkResponse(response))\n    .then(data => data.sentiment.score)\n    .catch(err => console.log('error: ', err))\n};\n\nconst cleanArticles = (articles: OriginalArticle[]): CleanedArticle[] => {\n  const cleanedArticles = articles.filter(({multimedia}: OriginalArticle) => {\n    return Array.isArray(multimedia)\n  })\n  .map(({ section, title, abstract, short_url, multimedia, url }: OriginalArticle) => {\n      return ({\n        topic: section,\n        title,\n        abstract,\n        shortUrl: short_url,\n        sentiment: 0,\n        multimedia: multimedia[0],\n        id: url.slice(24, -5).replace(/\\//g, '-')\n      });\n  });\n  return cleanedArticles;\n};\n","import '../Card/Card.css';\n\ninterface Card {\n  id: string\n  shortUrl: string\n  title: string\n  image: string\n  sentiment: number\n  abstract: string\n  updateUserSentiment: (userSentiment: number) => void\n  storeArticle: (id: string) => void\n  topic: string\n  toggleSaved: (id: string) => void\n  isSaved: boolean\n}\n\nconst Card = ({ title, image, id, shortUrl, sentiment, topic, updateUserSentiment, storeArticle, abstract, toggleSaved, isSaved }: Card): JSX.Element => {\n\n  const handleClick = () => {\n    updateUserSentiment(sentiment)\n    storeArticle(id)\n  }\n\n  return (\n    <article className=\"news-card cy-article-card\">\n      <div className=\"card-header\">\n        <p className=\"topic-text\">{topic.toUpperCase()}</p>\n        { isSaved ?\n          <button\n            className=\"save-button\"\n            onClick={ () => toggleSaved(id) }\n            type=\"button\"\n            aria-label=\"Remove article from saved articles\"\n          >\n            <span className=\"material-icons\">\n              bookmark\n            </span>\n          </button>\n\n        : <button\n            className=\"save-button\"\n            onClick={ () => toggleSaved(id) }\n            type=\"button\"\n            aria-label=\"Save article\"\n          >\n            <span className=\"material-icons\">\n              bookmark_border\n            </span>\n          </button>\n        }\n      </div>\n      <a\n        onClick={ handleClick }\n        className=\"cy-article-link\"\n        href={ shortUrl }\n        target='_blank'\n      >\n        <h2 className=\"article-title cy-article-title\">{title}</h2>\n        <img className=\"article-image cy-article-image\" src={image} alt={title} />\n      </a>\n      <p className=\"abstract-text\"> {abstract} </p>\n    </article>\n  )\n}\n\nexport default Card;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Header.css';\n\ninterface Header {\n  assignTopic: (topic: string) => void\n  selectedTopic: string\n}\n\nconst Header = ({ assignTopic, selectedTopic }: Header): JSX.Element => {\n  const [menuOpen, setMenuOpen] = useState(false);\n\n  return (\n    <header className=\"header\">\n      <Link to='/wellnews'>\n        <button className=\"check-in-btn\" aria-label=\"Return to check in question\">\n        </button>\n      </Link>\n      <Link\n        to='/wellnews/feed/home'\n        onClick={() => assignTopic('home')}>\n        <h1 className=\"header-txt cy-header-txt\">\n          Well<span className=\"header-text-2\">News</span>\n        </h1>\n      </Link>\n      { menuOpen ?\n        <Link to={`/wellnews/feed/${ selectedTopic }`} onClick={ () => setMenuOpen(false) }>\n          <button className=\"list-btn\" aria-label=\"Browse by Topic\"></button>\n        </Link>\n        : <Link to='/wellnews/topics' onClick={ () => setMenuOpen(true) }>\n          <button className=\"list-btn\" aria-label=\"Browse by Topic\"></button>\n        </Link>\n\n      }\n    </header>\n  )\n}\n\nexport default Header;\n","import { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { CleanedArticle } from '../../Models';\nimport Card from '../Card/Card';\nimport Header from '../Header/Header';\nimport './Feed.css';\n\ninterface FeedProps {\n  unreadArticles: CleanedArticle[] | undefined;\n  updateUserSentiment: (userSentiment: number) => void;\n  storeArticle: (id: string) => void;\n  selectedTopic: string;\n  toggleSaved: (id: string) => void;\n  savedArticles: CleanedArticle[];\n  assignTopic: (topic: string) => void\n  loading: boolean\n}\n\nconst Feed = ({ unreadArticles, updateUserSentiment, storeArticle, selectedTopic, toggleSaved, savedArticles, assignTopic, loading }: FeedProps): JSX.Element => {\n  const [articleNumber, setArticleNumber] = useState<number>(0)\n  let articleCards: JSX.Element[] = [];\n\n  if (unreadArticles) {\n    articleCards = unreadArticles.map(article => {\n      let isSaved;\n      if (savedArticles.find(savedArticle => savedArticle.id === article.id)) {\n        isSaved = true;\n      } else {\n        isSaved = false;\n      }\n\n      return  (\n        <Card\n          id={ article.id }\n          shortUrl={ article.shortUrl }\n          title={ article.title }\n          image={ article.multimedia.url }\n          sentiment={ article.sentiment }\n          topic={ article.topic}\n          abstract={ article.abstract }\n          updateUserSentiment={ updateUserSentiment }\n          storeArticle={ storeArticle }\n          toggleSaved={ toggleSaved }\n          isSaved={ isSaved }\n          key={ article.title }\n        />\n      )\n    })\n  }\n\n  const topic = selectedTopic === 'home' ? 'Top News' : selectedTopic.charAt(0).toUpperCase() + selectedTopic.slice(1)\n\n  return (\n    <>\n      <Header assignTopic={ assignTopic } selectedTopic={ selectedTopic } />\n      <h2>{topic}</h2>\n      <section className=\"articles-container\">\n        { loading ?\n          <h2 className=\"loading-text\">Loading... </h2>\n          : articleCards[articleNumber]\n        }\n        { articleCards.length === 0 && !loading &&\n          <Link to=\"/wellnews/topics\" className=\"find-more-btn\">\n            Find more articles by topic\n          </Link>\n        }\n      </section>\n      <div className=\"buffer\"></div>\n      <div className=\"arrow-container\">\n        { !!articleNumber &&\n          <button\n            className=\"backward-arrow-btn\"\n            onClick={() => setArticleNumber(articleNumber - 1)}\n            aria-label=\"Previoius article\"\n          >\n            <span className=\"material-icons\">\n              arrow_back_ios\n            </span>\n          </button>\n        }\n        { articleNumber < articleCards.length - 1 &&\n          <button\n          className=\"forward-arrow-btn\"\n          onClick={() => setArticleNumber(articleNumber + 1)}\n          aria-label=\"Next article\"\n          >\n            <span className=\"material-icons\">\n              arrow_forward_ios\n            </span>\n          </button>\n        }\n      </div>\n    </>\n  );\n};\n\nexport default Feed;\n","import Card from '../Card/Card';\nimport Header from '../Header/Header'\nimport { CleanedArticle } from '../../Models';\nimport '../Feed/Feed.css'\n\ninterface HistoryProps {\n  history: CleanedArticle[];\n  updateUserSentiment: (userSentiment: number) => void\n  storeArticle: (id: string) => void\n  toggleSaved: (id: string) => void\n  savedArticles: CleanedArticle[]\n  assignTopic: (topic: string) => void\n  selectedTopic: string;\n}\n\nconst History = ({ history, storeArticle, updateUserSentiment, toggleSaved, savedArticles, assignTopic, selectedTopic }: HistoryProps): JSX.Element => {\n\n  let articleCards: JSX.Element[] = [];\n\n  if (history) {\n    articleCards = history.map((article: CleanedArticle) => {\n      let isSaved;\n      if (savedArticles.find(savedArticle => savedArticle.id === article.id)) {\n        isSaved = true;\n      } else {\n        isSaved = false;\n      }\n\n      return (\n        <Card\n          title={ article.title }\n          image={ article.multimedia.url }\n          key={ article.title }\n          sentiment={ article.sentiment }\n          shortUrl={ article.shortUrl }\n          id={ article.id }\n          topic= { article.topic }\n          abstract= { article.abstract }\n          storeArticle={ storeArticle }\n          updateUserSentiment={ updateUserSentiment }\n          toggleSaved={ toggleSaved }\n          isSaved={ isSaved }\n        />\n      )\n    })\n  }\n\n  return (\n    <>\n      <Header assignTopic={ assignTopic } selectedTopic={ selectedTopic } />\n      <h2>History</h2>\n      <section className=\"articles-container\">\n        { articleCards.length ? articleCards\n          : <h3 className=\"no-match-message\">Articles you've read will appear here</h3> }\n      </section>\n    </>\n  )\n}\n\nexport default History;\n","import { Link, useLocation } from 'react-router-dom';\n\nconst NoMatch = (): JSX.Element => {\n  const location = useLocation();\n  return (\n    <div>\n      <h3 className=\"cy-error-message\">\n        No match for <code>{location.pathname}</code>\n      </h3>\n      <Link to=\"/wellnews/feed/home\" className=\"cy-feed-link\">\n        Back to Feed\n      </Link>\n    </div>\n  );\n}\n\nexport default NoMatch\n","import { useHistory } from 'react-router-dom';\nimport './SentimentForm.css';\n\ninterface FormProps {\n  updateUserSentiment: (userSentiment: number) => void;\n}\n\nconst Form = ({ updateUserSentiment }: FormProps): JSX.Element => {\n  const history = useHistory();\n\n  const submitUserSentiment = (userSentiment: number) => {\n      updateUserSentiment(userSentiment);\n      history.push('/wellnews/feed/home');\n  }\n\n  const showSynopsis = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    const formSynopsis = document.getElementById('synopsisInfo') as HTMLElement;\n    formSynopsis.classList.toggle('hidden');\n  }\n\n  return (\n    <section className=\"questionnaire\">\n      <header className=\"questionnaire-header\">\n        <div className=\"blue-stripe\">\n          <h1 className=\"header-text cy-header-text\">\n            Well<span className=\"header-text-2\">News</span>\n          </h1>\n        </div>\n      </header>\n      <h2 className='cy-sentiment-question'>What kind of mood are you in?</h2>\n      <div className=\"sentiments-container\">\n        <button\n          className=\"sentiment-btn cy-strongly-negative-btn\"\n          aria-label=\"strongly negative\"\n          title=\"strongly negative\"\n          onClick={() => submitUserSentiment(0)}\n        >\n          ☹️\n        </button>\n        <button\n          className=\"sentiment-btn cy-negative-btn\"\n          aria-label=\"negative\"\n          title=\"negative\"\n          onClick={() => submitUserSentiment(2)}\n        >\n          🙁\n        </button>\n        <button\n          className=\"sentiment-btn cy-neutral-btn\"\n          aria-label=\"neutral\"\n          title=\"neutral\"\n          onClick={() => submitUserSentiment(5)}\n        >\n          😐\n        </button>\n         <button\n          className=\"sentiment-btn cy-positive-btn\"\n          aria-label=\"positive\"\n          title=\"positive\"\n          onClick={() => submitUserSentiment(8)}\n        >\n          🙂\n        </button>\n        <button\n          className=\"sentiment-btn cy-strongly-positive-btn\"\n          aria-label=\"strongly positive\"\n          title=\"strongly positive\"\n          onClick={() => submitUserSentiment(10)}\n        >\n          😁\n        </button>\n      </div>\n      <button className='skip-btn' onClick={ () => submitUserSentiment(5) }>\n          Skip\n      </button>\n      <button className=\"view-synopsis-button cy-view-synopsis-button\" name=\"viewSynopsisButton\" onClick={ showSynopsis }>Why we ask? ▽</button>\n      <article className=\"hidden wellnews-synopsis cy-wellnews-synopsis\" id=\"synopsisInfo\">\n        <p>Based on your mood and the articles you read, we dynamically sort your feed and nudge you toward sentimental balance. We don't filter your feed.</p>\n        <p>If you prefer, skip the questionnare and we'll sort your feed based only on the articles you read.</p>\n      </article>\n    </section>\n  );\n};\n\nexport default Form;\n","import { Link } from 'react-router-dom';\nimport Header from '../Header/Header';\nimport './TopicForm.css';\n\ninterface TopicFormProps {\n  assignTopic: (selectedTopic: string) => void\n  selectedTopic: string;\n}\n\nconst TopicForm = ({ assignTopic, selectedTopic }: TopicFormProps): JSX.Element => {\n\nconst availableTopics = ['arts', 'automobiles', 'books', 'business', 'fashion', 'food', 'health', 'home', 'insider', 'magazine', 'movies', 'nyregion', 'obituaries', 'opinion', 'politics', 'realestate', 'science', 'sports', 'sundayreview', 'technology', 'theater', 't-magazine', 'travel', 'upshot', 'us', 'world'];\n\nconst sectionTopics = availableTopics.map(topic => {\n    return (\n      <Link\n        className=\"topic\"\n        to={`/wellnews/feed/${topic}`}\n        key={ topic }\n        onClick={() => assignTopic(topic)}>\n        {topic.charAt(0).toUpperCase() + topic.slice(1)}\n      </Link>\n    )\n})\n\n  return (\n    <>\n      <Header assignTopic={ assignTopic } selectedTopic={ selectedTopic } />\n      <Link to=\"/wellnews/saved\">\n        <button className=\"saved-btn\" type=\"button\" aria-label=\"Saved articles\">\n          <span className=\"material-icons\">\n            bookmark\n          </span>\n          Saved Articles\n        </button>\n      </Link>\n      <Link to='/wellnews/history'>\n        <button className=\"history-btn\" type=\"button\" aria-label=\"History\">\n        <span className=\"material-icons\">\n          history\n        </span>\n          History\n        </button>\n      </Link>\n      <form className=\"cy-topic-selection\">\n        { sectionTopics }\n      </form>\n    </>\n  )\n}\n\nexport default TopicForm;\n","import Card from '../Card/Card';\nimport { CleanedArticle } from '../../Models';\nimport Header from '../Header/Header';\nimport '../Feed/Feed.css';\n\ninterface SavedArticlesProps {\n  savedArticles: CleanedArticle[];\n  updateUserSentiment: (userSentiment: number) => void;\n  storeArticle: (id: string) => void;\n  toggleSaved: (id: string) => void;\n  assignTopic: (topic: string) => void\n  selectedTopic: string;\n}\n\nconst SavedArticles = ({ savedArticles, storeArticle, updateUserSentiment, toggleSaved, assignTopic, selectedTopic }: SavedArticlesProps): JSX.Element => {\n  let articleCards: JSX.Element[] = [];\n\n  if (savedArticles) {\n    articleCards = savedArticles.map((article: CleanedArticle) => {\n      let isSaved = false;\n      if (savedArticles.find(savedArticle => savedArticle.id === article.id)) {\n        isSaved = true;\n      } else {\n        isSaved = false;\n      }\n\n      return (\n        <Card\n          title={ article.title }\n          image={ article.multimedia.url }\n          key={ article.title }\n          sentiment={ article.sentiment }\n          shortUrl={ article.shortUrl }\n          id={ article.id }\n          topic= { article.topic }\n          abstract= { article.abstract }\n          storeArticle={ storeArticle }\n          toggleSaved={ toggleSaved }\n          updateUserSentiment={ updateUserSentiment }\n          isSaved={ isSaved }\n        />\n      )\n    })\n  }\n\n  return (\n    <>\n      <Header assignTopic={ assignTopic } selectedTopic={ selectedTopic } />\n      <h2>Saved Articles</h2>\n      <section className=\"articles-container\">\n        { articleCards.length ? articleCards\n          : <h3 className=\"no-match-message\">Saved articles will appear here</h3>\n        }\n      </section>\n    </>\n  )\n}\n\nexport default SavedArticles;\n","import { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { getArticles, getSentiment } from '../../apiCalls';\nimport { CleanedArticle } from '../../Models';\nimport Feed from '../Feed/Feed';\nimport Header from '../Header/Header';\nimport History from '../History/History'\nimport NoMatch from '../NoMatch/NoMatch';\nimport SentimentForm from '../SentimentForm/SentimentForm';\nimport TopicForm from '../TopicForm/TopicForm';\nimport SavedArticles from '../SavedArticles/SavedArticles';\nimport './App.css';\n\nconst App = (): JSX.Element => {\n  const [articles, setArticles] = useState<CleanedArticle[]>([]);\n  const [unreadArticles, setUnreadArticles] = useState<\n    CleanedArticle[] | undefined\n  >([]);\n  const [history, setHistory] = useState<CleanedArticle[]>([]);\n  const [userSentiment, setUserSentiment] = useState<number | null>(null);\n  const [selectedTopic, setSelectedTopic] = useState<string>('home');\n  const [savedArticles, setSavedArticles] = useState<CleanedArticle[]>([]);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(true);\n\n  useEffect((): void => {\n    getArticles('home')\n      .then((cleanedArticles: CleanedArticle[]): void => {\n        getSentimentScores(cleanedArticles)\n          .then((response: number[]) => {\n            const scoredArticles = cleanedArticles.map((article, i) => {\n               article.sentiment = Math.round((response[i] + 1) * 5);\n               return article;\n            });\n            setArticles(scoredArticles);\n            setLoading(false);\n            setError('')\n          });\n      })\n      .catch(error => setError(error.message));\n  }, []);\n\n  useEffect((): void => {\n    const sortedArticles = getSortedArticles();\n    setArticles(sortedArticles);\n  }, [userSentiment])\n\n  useEffect((): void => {\n    updateHistory();\n    const unreadArticles = getUnreadArticles();\n    setUnreadArticles(unreadArticles);\n  }, [articles])\n\n  const getSortedArticles = (): CleanedArticle[] => {\n    let sortedArticles;\n    if (userSentiment! >= 0 && userSentiment! <= 3) {\n      sortedArticles = articles.slice().sort((articleA, articleB) => {\n        return articleB.sentiment - articleA.sentiment;\n      })\n    } else if (userSentiment! <= 10 && userSentiment! >= 7) {\n      sortedArticles = articles.slice().sort((articleA, articleB) => {\n        return articleA.sentiment - articleB.sentiment;\n      })\n    } else {\n      sortedArticles = articles.slice().sort(() => 0.5 - Math.random());\n    }\n    return sortedArticles;\n  }\n\n  const getUnreadArticles = (): CleanedArticle[] | undefined => {\n    if (history.length) {\n      return articles.filter(article => {\n        return !history.find(historyArticle => historyArticle.id === article.id)\n      })\n    }\n    return articles;\n  }\n\n  const getSentimentScores = (cleanedArticles: CleanedArticle[]): Promise<number[]> => {\n    return Promise.all(\n      cleanedArticles.map((article: CleanedArticle) => {\n        return getSentiment(article.title, article.abstract)\n      })\n    );\n  };\n\n  const updateUserSentiment = (newUserSentiment: number) => {\n    if (userSentiment === null) {\n      return setUserSentiment(newUserSentiment)\n    }\n    setUserSentiment((userSentiment + newUserSentiment) / 2);\n  }\n\n  const assignTopic = (selectedTopic: string): void => {\n    setLoading(true)\n    setSelectedTopic(selectedTopic);\n    getArticles(selectedTopic)\n      .then((cleanedArticles: CleanedArticle[]): void => {\n        getSentimentScores(cleanedArticles)\n          .then((response: number[]) => {\n\n            const scoredArticles = cleanedArticles.map((article, i) => {\n               article.sentiment = Math.round((response[i] + 1) * 5);\n               return article;\n            });\n            setArticles(scoredArticles)\n            setLoading(false);\n            setError('');\n          });\n      })\n      .catch(error => setError(error.message));\n  }\n\n  const getLocalHistory = (): string[] => {\n    return JSON.parse(localStorage.getItem('wellnewsHistory')!);\n  }\n\n  const updateHistory = (): void => {\n    const localHistory = getLocalHistory();\n    if (localHistory && localHistory.length) {\n      const newHistory = articles.filter((article) => {\n        return localHistory.includes(article.id)\n      })\n      setHistory(newHistory)\n    }\n  }\n\n  const storeArticle = (id: string): void => {\n    const matchingArticle = articles.find(article => article.id === id);\n    const localHistory = getLocalHistory();\n    if (!localHistory) {\n      localStorage.setItem('wellnewsHistory', JSON.stringify([id]));\n      return setHistory([matchingArticle!]);\n    } else if (!localHistory.includes(id)) {\n      localHistory.push(id)\n      localStorage.setItem('wellnewsHistory', JSON.stringify(localHistory))\n      setHistory([...history, matchingArticle!]);\n    }\n  }\n\n  const toggleSaved = (id: string): void => {\n    const isSaved = savedArticles.find(savedArticle => {\n      return savedArticle.id === id;\n    })\n    if (!isSaved) {\n      const newSavedArticle = articles.find(article => {\n        return article.id === id;\n      })\n      setSavedArticles([...savedArticles, newSavedArticle!])\n    } else {\n      const newSavedArticles = savedArticles.filter(savedArticle => {\n        return savedArticle.id !== id;\n      })\n      setSavedArticles(newSavedArticles);\n    }\n  }\n\n  const path = `/wellnews/feed/${selectedTopic}`\n\n  return (\n    <div className=\"app-container\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/wellnews/\">\n            <SentimentForm updateUserSentiment={ updateUserSentiment } />\n          </Route>\n          <Route\n            path={path}\n            render={() => {\n              return (\n                <>\n                  <Feed\n                    unreadArticles={ unreadArticles }\n                    selectedTopic={ selectedTopic }\n                    updateUserSentiment={ updateUserSentiment }\n                    storeArticle={ storeArticle }\n                    toggleSaved={ toggleSaved }\n                    savedArticles={ savedArticles}\n                    assignTopic={ assignTopic }\n                    loading={ loading }\n                  />\n                  { error && <h2>{error}</h2> }\n                </>\n              )\n            }}\n          />\n          <Route exact path=\"/wellnews/topics\">\n            <TopicForm\n              assignTopic={ assignTopic }\n              selectedTopic={ selectedTopic }\n            />\n          </Route>\n          <Route path=\"/wellnews/saved\">\n            <SavedArticles\n              savedArticles={ savedArticles }\n              storeArticle={ storeArticle }\n              updateUserSentiment={ updateUserSentiment }\n              toggleSaved={ toggleSaved }\n              assignTopic={ assignTopic }\n              selectedTopic={ selectedTopic }\n            />\n          </Route>\n          <Route\n            exact path=\"/wellnews/history\"\n            render={() => {\n              return (\n                <>\n                  <History\n                    history={ history }\n                    storeArticle={ storeArticle }\n                    updateUserSentiment={ updateUserSentiment }\n                    toggleSaved={ toggleSaved }\n                    savedArticles={ savedArticles }\n                    assignTopic={ assignTopic }\n                    selectedTopic={ selectedTopic }\n                  />\n                  { error && <h2>{error}</h2> }\n                </>\n              )\n            }}\n          />\n          <Route path=\"*\" component={NoMatch} />\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}